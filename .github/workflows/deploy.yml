name: Backend CI/CD - AutoFix

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: autofix-backend
  CONTAINER_NAME: autofix_backend_prod
  DEPLOY_PATH: /var/www/autofix-backend

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: npm run format:check
        continue-on-error: true

      - name: Run linter
        run: npm run lint:ci
        continue-on-error: false

      - name: Run tests
        run: npm test --if-present || echo "No tests or tests failed"
        continue-on-error: true
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_DATABASE: test_db
          JWT_SECRET: test_jwt_secret_for_testing_only
          JWT_REFRESH_SECRET: test_refresh_secret_for_testing_only

      - name: Build application
        run: npm run build

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ env.DOCKER_IMAGE_NAME }}:latest \
            -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} \
            .

      - name: Save Docker image
        run: docker save ${{ env.DOCKER_IMAGE_NAME }}:latest | gzip > autofix-backend.tar.gz

      - name: Create .env.production file
        run: |
          cat > .env.production << EOF
          # Database Configuration
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          
          # JWT Configuration
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          
          # Frontend URL
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          
          # Application
          PORT=4000
          NODE_ENV=production
          
          # Email Configuration (Optional)
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASS=${{ secrets.SMTP_PASS }}
          EOF

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "autofix-backend.tar.gz,docker-compose.prod.yml,.env.production"
          target: ${{ env.DEPLOY_PATH }}

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            
            # Load Docker image
            echo "Loading Docker image..."
            docker load < autofix-backend.tar.gz
            
            # Stop and remove old container
            echo "Stopping old container..."
            docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            
            # Start new container
            echo "Starting new container..."
            docker-compose -f docker-compose.prod.yml up -d
            
            # Clean up
            echo "Cleaning up..."
            rm autofix-backend.tar.gz
            
            # Remove dangling images
            docker image prune -f
            
            # Wait for container to start
            echo "Waiting for container to initialize..."
            sleep 15
            
            # Check container status
            echo "Container status:"
            docker ps | grep ${{ env.CONTAINER_NAME }} || echo "Warning: Container not found in docker ps"
            
            # Show logs
            echo ""
            echo "Recent logs:"
            docker logs --tail 50 ${{ env.CONTAINER_NAME }} || echo "Could not fetch logs"
            
            echo ""
            echo "‚úÖ Deployment completed!"

      - name: Health check
        run: |
          echo "Waiting for application to start..."
          sleep 20
          
          for i in {1..5}; do
            echo "Health check attempt $i..."
            if curl -f -s https://backend.prochainconsulting.com/api/v1/health; then
              echo "‚úÖ Backend API is healthy!"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done
          
          echo "‚ö†Ô∏è Health check failed! Check logs manually."
          echo "This might be expected if Nginx is not yet configured."
          exit 0

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Backend deployment completed!"
            echo "üåê API URL: https://backend.prochainconsulting.com/api/v1"
          else
            echo "‚ùå Backend deployment had issues!"
            echo "Check the logs above for details."
          fi
